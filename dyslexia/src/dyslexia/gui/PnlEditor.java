/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dyslexia.gui;

import dyslexia.ThrowingErrorListener;
import dyslexia.grammar.*;
import java.awt.BorderLayout;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import org.antlr.v4.gui.TreeViewer;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import org.fife.ui.rtextarea.*;
import org.fife.ui.rsyntaxtextarea.*;

/**
 *
 * @author jonats
 */
public class PnlEditor extends javax.swing.JPanel {
    RSyntaxTextArea jTextPane1 = new RSyntaxTextArea(20, 60);
    private JTabbedPane jTabbedPane1;
    private JScrollPane pnlTree;
    private PnlConsole pnlConsole;
    private FrmDislexia frmDislexia;
    private PnlTac pnlTac;
    private PnlParser pnlParser;
    private PnlSemantic pnlSemantic;
    
    /**
     * Creates new form PnlEditor
     */
    public PnlEditor(JTabbedPane jTabbedPane1, PnlConsole pnlConsole, FrmDislexia frmDislexia, PnlTac pnlTac, PnlParser pnlParser) {
        initComponents();
        this.jTabbedPane1 = jTabbedPane1;
        this.pnlConsole = pnlConsole;
        this.frmDislexia = frmDislexia;
        this.pnlTac = pnlTac;
        this.pnlParser = pnlParser;
        this.pnlSemantic = this.frmDislexia.pnlSemantic; 
        
        jTextPane1.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
        jTextPane1.setCodeFoldingEnabled(true);
        RTextScrollPane sp = new RTextScrollPane(jTextPane1);
        //sp.setBounds(10, 10, 200, 200);
        sp.setBounds(10, 10, 960, 345);
        this.add(sp, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        jButton1.setText("compile and run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("open file");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(208, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(261, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private ParseTree generateParseTree(){
        System.out.println("GENERATING PARSE TREE");
        String program = jTextPane1.getText();
        //System.out.println("PROGRAM: " + program);
        DyslexiaLexer dyslexiaLexer = new DyslexiaLexer(new ANTLRInputStream(program));
        
        // For Own Implementation of Error Handling
        //dyslexiaLexer.removeErrorListeners();
        //dyslexiaLexer.addErrorListener(ThrowingErrorListener.INSTANCE);
        
        // TODO add output for scanner displaying tokens.
        
//        List<? extends Token> tokens = dyslexiaLexer.getAllTokens();  
        //System.out.println("TOKEN SIZE: " + tokens.size());
        //System.out.println("ALL TOKENS: " + tokens);
          
//        System.out.println("TOKENS START");
//        for(int i = 0; i < tokens.size(); i++){
//            Token token = tokens.get(i);
//            String tokenTypeDisplayName = DyslexiaLexer.VOCABULARY.getDisplayName(token.getType());
//            String tokenTypeLiteral = DyslexiaLexer.VOCABULARY.getLiteralName(token.getType());
//            String tokenSymbolicName = DyslexiaLexer.VOCABULARY.getSymbolicName(token.getType());
//            System.out.println("i: " + i + " TOKEN: '" + token.getText() + "'" + 
//                    //" TOKEN TYPE LITERAL: " + tokenTypeLiteral + 
//                    //" TOKEN TYPE NAME: " +  tokenTypeDisplayName + 
//                    " TOKEN TYPE: " + tokenSymbolicName);      
//        }
//        System.out.println("TOKENS END");
        
        CommonTokenStream tokens = new CommonTokenStream(dyslexiaLexer);
        DyslexiaParser parser = new DyslexiaParser(tokens);
        
        // For Own Implementation of Error Handling
        DyslexiaParserErrorListener parserErrorListener = new DyslexiaParserErrorListener();
        //parser.removeErrorListeners();
        parser.addErrorListener(parserErrorListener);
        
        ParseTree tree = parser.compilationUnit();
        System.out.println("START TREE");
        System.out.println(tree.toStringTree(parser));
        System.out.println("END TREE");
        // printing Errors
        pnlParser.printErrors(parserErrorListener.errors);
        //System.out.println("TOKENS: " + tokens.getTokens());
        
        // Next will be EvalVisitor
        // EvalVisitor visitor = new EvalVisitor();
        //for(int i = 0; i < tokens.getTokens().size(); i ++){
        //    System.out.println(i + " TOKEN: " + tokens.getTokens().get(i));
        //}
        
        // Bad Practice
        // Adding and removing of tabs from the tabbedpane should be in FrmDislexia
        // Check if PnlTree is not null
        if ( this.pnlTree != null ) {
            jTabbedPane1.remove(pnlTree);
        }
        
        JPanel panel = new JPanel();
        JScrollPane scrPane = new JScrollPane(panel);
        this.pnlTree = scrPane;
        TreeViewer viewr = new TreeViewer(Arrays.asList(
                parser.getRuleNames()),tree);
        viewr.setScale(1.5);//scale a little
        panel.add(viewr);
        ImageIcon icon = new ImageIcon();   
        jTabbedPane1.addTab("parse tree", icon, scrPane, "tree");
        System.out.println("GENERATED PARSE TREE");
        
        return tree;
    }
    
    private void annotatedListener(ParseTree tree){
        System.out.println("ANNOTATED LISTENER CALLED");
        ParseTreeWalker walker = new ParseTreeWalker();
        DyslexiaAnnotatedListener annotatedListener = new DyslexiaAnnotatedListener(this.pnlConsole);
        walker.walk(annotatedListener, tree);
        System.out.println("ANNOTATED LISTENER CALLED");
    }

    private void annotatedListenerTac(ParseTree tree){
        System.out.println("ANNOTATED LISTENER CALLED");
        ParseTreeWalker walker = new ParseTreeWalker();
        DyslexiaAnnotatedListenerTac annotatedListener = new DyslexiaAnnotatedListenerTac(this.pnlTac);
        walker.walk(annotatedListener, tree);
        System.out.println("ANNOTATED LISTENER CALLED");
    }
    
    private boolean semanticErrorListener(ParseTree tree){
        System.out.println("CHECKING SEMANTIC ERRORS");
        ParseTreeWalker walker = new ParseTreeWalker();
        DyslexiaSemanticErrorListener semanticErrorListener = new DyslexiaSemanticErrorListener();
        //walker.walk(semanticErrorListener, tree);
        System.out.println("CHECKED SEMANTIC ERRORS");
        return false;
    }
    
    private boolean semanticErrorVisitor(ParseTree tree){
        System.out.println("CHECKING SEMANTIC ERRORS");
        DyslexiaSemanticErrorVisitor errorVisitor = new DyslexiaSemanticErrorVisitor(this.pnlSemantic);
        errorVisitor.visit(tree);
        System.out.println("CHECKED SEMANTIC ERRORS");
        if (errorVisitor.errors.isEmpty())
            return false;
        else 
            this.pnlSemantic.printErrors(errorVisitor.errors);
        return true;
    }
    
    private void evaluate(ParseTree tree){
        System.out.println("EVALUATING TREE");
        DyslexiaEvaluator evaluator = new DyslexiaEvaluator(this.pnlConsole, this.frmDislexia);
        evaluator.visit(tree);
        System.out.println("EVALUATING TREE");
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        System.out.println("Interpreting code...");
        ParseTree tree = generateParseTree();
        if ( semanticErrorVisitor(tree) ){
            System.out.println("There are semantic errors.");
        } else {
            //annotatedListener(tree);
            evaluate(tree);
        }
        System.out.println("Code Interpreted.");
        //annotatedListenerTac(tree);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            //
            String content = "";
            try
            {
              BufferedReader reader = new BufferedReader(new FileReader(selectedFile));
              String line;
              while ((line = reader.readLine()) != null)
              {
                content = content + line + "\n";
              }
              reader.close();
            }
            catch (Exception e)
            {
              System.err.format("Exception occurred trying to read '%s'.", selectedFile);
              e.printStackTrace();
            }            
            //
            jTextPane1.setText(content);
        }
    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    // End of variables declaration//GEN-END:variables
}
